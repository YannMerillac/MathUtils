#include "LBFGSB.h"
#include <cstring>

#define nb_var 1
#define nb_corr 1
int main(double& pgtol, const int& nitmax, int& iprint, double work[])
{
  // Initialize LBFGSB
  int   NBVAR = nb_var;
  //number of corrections for LBFGSB
  int   NBCORR = nb_corr;
  // number of boundaries for each variable: array of size NBVAR
  int   boundtypes[nb_var];
  boundtypes[0]=2;
  //double  f;
  // gradient array: size NBVAR
  double  g[nb_var];
  double  EPSLIMIT = 0;
  // work array of size 2*nb_corr*nb_var+4*nb_var+12*nb_corr*nb_corr+12*nb_corr
  double  wa[2*nb_corr*nb_var + 5*nb_var + 11*nb_corr*nb_corr + 8*nb_corr];
  // work array of size 3*NBVAR
  int  iwa[3*nb_var];
  // work arrays of fixed size
  char task[60];
  char csave[60];
  int  lsave[4];
  int  isave[44];
  double dsave[29];

  // Initialize task
  memset(task,0,sizeof(task));
  strcpy(task,"START");
  memset(task+5,' ',sizeof(task)-5);

  // first step coefficient
  double fdelta = 1.;

  // design variables and bounds
  double x[nb_var];
  double lbnd[nb_var];
  double ubnd[nb_var];

  double f;
  double g[nb_var];

  char mode = 'R'; // R = RUN; S = STOP
  int iterations = 0;
  // Optimization loop
  while((mode == 'R') && (iterations<nitmax)){
    if('F'==task[0]){   //new calculation of f and g requested by LBFGSB
      // Compute point coordinates
      // Compute obj func
      //f = (x-xdata)*(x-xdata)+(y-ydata)*(y-ydata)+(z-zdata)*(z-zdata);
      // obj func gradient
      //g[0] = 2*(dx*(x-xdata)+dy*(y-ydata)+dz*(z-zdata));
    }    
    // call LBFGSB
    LBFGSB(NBVAR,            // 1 variables : u
	   NBCORR,               // number of corrections used
	   x,              	 // current coord of the best point
	   lbnd,                //lower bounds
	   ubnd,                //upper bounds
	   boundtypes,           //types of bounds (2=upper&lower)
	   f,                    //function to optimize (distance)
	   g,                    //gradient of the function
	   EPSLIMIT,             //stop if f<EPSLIMIT*epsilon machine
	   pgtol,                //stop if all component of g< PGGRADTOL
	   fdelta,               //first step size
	   wa,                   //work array. do not modify
	   iwa,                  //work array of integers. do not modify
	   task,                 //code generated by the function
	   iprint,               //info output code. -1 = no info.
	   csave,                //work array. do not modify
	   lsave,                //work array. do not modify
	   isave,                //work array. do not modify
	   dsave);               //work array. do not modify
  iterations+=1;
  // check status
  if((task[0]=='C') || (task[0]=='A')) mode='S';
  }  //end of while
  return 0;
}
